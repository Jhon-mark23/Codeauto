const axios = require("axios");
const api = "https://joshweb.click";

async function get(url) {
  try {
    const response = await axios.get(url);
    return response.data;
  } catch (e) {
    return e.message;
  }
}

async function stream(url) {
  try {
    const r = (
      await axios["get"](url, {
        responseType: "arraybuffer",
      })
    )["data"];
    return r;
  } catch (e) {
    return e["message"];
  }
}

class Deku {
  constructor() {}
  // conversational

  // bbox
  async Cblackbox(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");

    try {
      const data = await get(`${api}/api/blackboxai?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // qwen
  async Cqwen(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");

    try {
      const data = await get(`${api}/ai/qwen1.5-14b?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // llama
  async Cllama(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");

    try {
      const data = await get(`${api}/ai/llama-3-8b?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // zephyr
  async Czephyr(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");

    try {
      const data = await get(`${api}/ai/zephyr-7b?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // discoLM
  async Cdiscolm(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");

    try {
      const data = await get(`${api}/ai/discolm-german?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // hermes
  async Chermes(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");

    try {
      const data = await get(`${api}/ai/openhermes-2.5?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // non conversational

  // Llama 3
  async llama(prompt) {
    if (!prompt) throw new Error("No prompt provided");

    try {
      const data = await get(`${api}/api/llama-3-70b?q=${prompt}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // bbox
  async blackbox(prompt) {
    if (!prompt) throw new Error("No prompt provided");

    try {
      const data = await get(`${api}/blackbox?prompt=${prompt}`);
      return data.data;
    } catch (error) {
      return error.message;
    }
  }

  // gemma 7b
  async gemma(prompt) {
    if (!prompt) throw new Error("No prompt provided");

    try {
      const data = await get(`${api}/api/gemma-7b?q=${prompt}`);
      return data.data;
    } catch (error) {
      return error.message;
    }
  }

  // gemini
  async gemini(prompt) {
    if (!prompt) throw new Error("No prompt provided");

    try {
      const data = await get(`${api}/new/gemini?prompt=${prompt}`);
      return data.result.data;
    } catch (error) {
      return error.message;
    }
  }

  // gemini 1.5 (with vision)
  async geminiv(prompt, url) {
    if (!prompt) throw new Error("No prompt provided");
    try {
      if (url) {
        const data = await get(
          `${api}/gemini?prompt=${prompt}&url=image_url_here`,
        ); //direct image url
        return data.gemini;
      } else {
        const data = await get(`${api}/gemini?prompt=${prompt}`);
        return data.gemini;
      }
    } catch (error) {
      return error.message;
    }
  }

  // linerva
  async linerva(prompt) {
    if (!prompt) throw new Error("No prompt provided");
    try {
      const data = await get(`${api}/api/liner?q=${prompt}`);
      return data.result.data;
    } catch (error) {
      return error.message;
    }
  }

  // CHARACTER AI (CONVERSATIONAL) //

  // deku
  async deku(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");
    try {
      const data = await get(`${api}/pai/deku?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // gojo
  async gojo(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");
    try {
      const data = await get(`${api}/pai/gojo?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // sukuna
  async sukuna(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");
    try {
      const data = await get(`${api}/pai/sukuna?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // rimuru
  async rimuru(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");
    try {
      const data = await get(`${api}/pai/rimuru?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // cid kagenou
  async cid(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");
    try {
      const data = await get(`${api}/pai/cid?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // luffy d monkey
  async luffy(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");
    try {
      const data = await get(`${api}/pai/luffy?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // rudeus
  async rudeus(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");
    try {
      const data = await get(`${api}/pai/rudeus?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // ichigo
  async ichigo(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");
    try {
      const data = await get(`${api}/pai/ichigo?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // naruto
  async naruto(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");
    try {
      const data = await get(`${api}/pai/naruto?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // boruto
  async boruto(prompt, uid) {
    if (!prompt) throw new Error("No prompt provided");
    if (!uid) throw new Error("No UID provided");
    try {
      const data = await get(`${api}/pai/boruto?q=${prompt}&uid=${uid}`);
      return data.result;
    } catch (error) {
      return error.message;
    }
  }

  // IMAGE
  async fbcover(name, subname, num, address, email, uid, color) {
    if (!name) throw new Error("No name provided");
    if (!subname) throw new Error("No subname provided");
    if (!num) throw new Error("No number provided");
    if (!address) throw new Error("No address provided");
    if (!email) throw new Error("No email provided");
    if (!uid) throw new Error("No UID provided");
    if (!color) throw new Error("No color provided");
    // /canvas/fbcover?name=Mark&subname=Zuckerberg&sdt=n/a&address=USA&email=zuck@gmail.com&uid=4&color=Cyan
    try {
      const data = await stream(
        `${api}/canvas/fbcover?name=${name}&subname=${subname}&sdt=${num}&address=${address}&email=${email}&uid=${uid}&color=${color}`,
      );
      return Buffer.from(data, "base64");
    } catch (error) {
      return error.message;
    }
  }

  async profile(id, bgname, signature, color) {
    if (!id) throw new Error("No id provided");
    if (!bgname) throw new Error("No bgname provided");
    if (!signature) throw new Error("No signature provided");
    if (!color) throw new Error("No color provided");
    try {
      const data = await stream(
        `${api}/canvas/avatar?id=${id}&bgname=${bgname}&signature=${signature}&color=${color}`,
      );
      return Buffer.from(data, "base64");
    } catch (error) {
      return error.message;
    }
  }
  async profilev2(id, signature, bgtext, color) {
    if (!id) throw new Error("No id provided");
    if (!bgtext) throw new Error("No bgname provided");
    if (!signature) throw new Error("No signature provided");
    try {
      const data = await stream(
        `${api}/canvas/avatarv2?id=${id}&bgtext=${bgtext}&signature=${signature}&color=${color}`,
      );
      return Buffer.from(data, "base64");
    } catch (error) {
      return error.message;
    }
  }
  // `${api}/canvas/fbcoverv4?name=${name}&id=${id}&subname=${subname}&colorname=${color}&colorsub=${color2}`
  async fbcoverv4(name, id, subname, colorname, colorsub){
    if (!name) throw new Error("No id provided");
    if (!id) throw new Error("No bgname provided");
    if (!subname) throw new Error("No signature provided");
    const color1 = colorname || 'white', color2 = colorsub || 'white';
    try {
      const data = await stream(`${api}/canvas/fbcoverv4?name=${name}&id=${id}&subname=${subname}&colorname=${color1}&colorsub=${color2}`)
      return Buffer.from(data, "base64");
    } catch (error) {
      return error.message;
    }
  }
  
  async characterID(id) {
    let result;
    try {
      if (!id) {
        const rest = await get(`${api}/canvas/search`);
        result = rest.data;
        return result;
        /* 
        [
          {
            "imgAnime": "https://lh3.googleusercontent.com/--HHFVR4QkTE/YbyGiklcm7I/AAAAAAAA2e8/q5tbb-FB9bs5cdytxpivLp3pWj1AuRHrQCNcBGAsYHQ/s0/boy-1.png",
            "colorBg": "#f8ca3e",
            "dm": "boy"
          },
          {
            "imgAnime": "https://lh3.googleusercontent.com/-ESzEN4e9KCI/Yad386gx7SI/AAAAAAAA1yk/ty7r8jI_DF0-EAE6FeOYghqk1I55OyAmACNcBGAsYHQ/s0/boy-3.png",
            "colorBg": "#3f4a8a",
            "dm": "boy"
          },
          {
            "imgAnime": "https://lh3.googleusercontent.com/-UinqgAaxi5s/YXJ9PzdF8NI/AAAAAAAAyhY/he8Y4PAMuQUZLE-185pq8ImagmHx1gYzACNcBGAsYHQ/s0/boy-4.png",
            "colorBg": "#e2bc5f",
            "dm": "boy"
          },
          {...}
          ]
        */
      }
      const rest = await get(`${api}/canvas/search?id=${id}`);
      result = rest.data;
      return result;
      /* 
      {
        "imgAnime": "https://lh3.googleusercontent.com/-bhrRW3VOKRI/YcLnMSNMeKI/AAAAAAAA2tk/7BBW3Z1kktsv_6bGCEir0s_Krn8qDAnegCNcBGAsYHQ/s0/boy-6.png",
        "colorBg": "#6b54c0",
        "dm": "boy"
      }
      */
    } catch (error) {
      return error.message;
    }
  }
  // SDXL
  async sdxl(prompt, style) {
    try {
      if (!prompt) throw new Error("No prompt provided");
      if (prompt == "list".toLocaleLowerCase()) {
        return {
          list: {
            1: "anime",
            2: "fantasy",
            3: "pencil",
            4: "digital",
            5: "vintage",
            6: "3d (render)",
            7: "cyberpunk",
            8: "manga",
            9: "realistic",
            10: "demonic",
            11: "heavenly",
            12: "comic",
            13: "robotic",
          },
        };
      }
      const data = await stream(`${api}/sdxl?q=${prompt}&style=${style || ""}`);
      return Buffer.from(data, "base64");
    } catch (e) {
      return e.message;
    }
  }
  // END
}

module.exports = Deku;
